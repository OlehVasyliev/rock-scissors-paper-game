
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


class Level extends Phaser.State {
	
	/**
	 * Level.
	 */
	constructor() {
		
		super();
		
	}
	
	init() {
		
		this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
		this.scale.pageAlignHorizontally = true;
		this.scale.pageAlignVertically = true;
		this.stage.backgroundColor = '#fed500';
		
	}
	
	preload () {
		
		this.load.pack('assets', 'assets/pack.json');
		
	}
	
	create() {
		var _background = this.add.sprite(0.0, 0.0, 'background');
		_background.scale.set(800.0, 600.0);
		
		var _winChanceGroup = new winChance(this.game);
		_winChanceGroup.position.set(100.0, 23.0);
		
		var _animHand1 = this.add.sprite(1050.0, 129.0, 'full-seq', 0);
		_animHand1.scale.set(-1.0, 1.0);
		_animHand1.pivot.set(0.5, 0.5);
		_animHand1.animations.add('idle', [0, 1, 2, 3, 4], 5, true);
		_animHand1.animations.add('scissors', [4, 5, 5, 5, 5], 5, false);
		_animHand1.animations.add('rock', [4, 7, 7, 7, 7], 5, false);
		_animHand1.animations.add('paper', [4, 6, 6, 6, 6], 5, false);
		
		var _animHand0 = this.add.sprite(-250.0, 129.0, 'full-seq', 0);
		_animHand0.pivot.set(0.5, 0.5);
		_animHand0.animations.add('idle', [0, 1, 2, 3, 4], 5, true);
		_animHand0.animations.add('scissors', [4, 5, 5, 5, 5], 5, false);
		_animHand0.animations.add('rock', [4, 7, 7, 7, 7], 5, false);
		_animHand0.animations.add('paper', [4, 6, 6, 6, 6], 5, false);
		
		var _scoreWrap = this.add.group();
		_scoreWrap.position.set(51.0, 37.0);
		
		var _score = this.add.text(131.0, 21.0, '0', {"font":"bold 20px Arial"}, _scoreWrap);
		
		var _scoreTitle = this.add.text(48.0, 21.0, 'SCORE:', {"font":"bold 20px Arial"}, _scoreWrap);
		
		var _rockBtn = this.add.button(123.0, 730.0, 'full-seq', null, this, null, 0, null, null);
		_rockBtn.name = 'rockBtn';
		_rockBtn.angle = -90.0;
		_rockBtn.scale.set(0.5, 0.5);
		
		var _scissorsBtn = this.add.button(328.0, 730.0, 'full-seq', null, this, null, 5, null, null);
		_scissorsBtn.angle = -90.0;
		_scissorsBtn.scale.set(0.5, 0.5);
		
		var _paperBtn = this.add.button(568.0, 731.0, 'full-seq', null, this, null, 6, null, null);
		_paperBtn.angle = -90.0;
		_paperBtn.scale.set(0.5, 0.5);
		
		var _btnStartGame = this.add.button(300.0, 356.0, 'btnSprite', null, this, null, 0, 1, 0);
		_btnStartGame.scale.set(0.3, 0.3);
		_btnStartGame.pivot.set(0.5, 0.5);
		
		
		
		// fields
		
		this.fWinChanceGroup = _winChanceGroup;
		this.fAnimHand1 = _animHand1;
		this.fAnimHand0 = _animHand0;
		this.fScore = _score;
		this.fScoreTitle = _scoreTitle;
		this.fRockBtn = _rockBtn;
		this.fScissorsBtn = _scissorsBtn;
		this.fPaperBtn = _paperBtn;
		this.fBtnStartGame = _btnStartGame;
		this.afterCreate()
		
	}
	
	/* state-methods-begin */
	// -- user code here --
	afterCreate(){
		
		this.gameScore = 0;
			 
		this.variablesOfGameResoult = {
			'rock' : ['paper', 'rock', 'scissors'],
			'scissors' : ['rock', 'scissors', 'paper'],
			'paper' : ['scissors', 'paper', 'rock']
		};

		this.gameStep = 0;
		var handsAnim = (show) => {
			
			var bigHandsAnim = (item) =>{
				var hand = this[`fAnimHand${item}`];
				var animDelay = !(show+1) && 1500 || 0;
				var anim = this.add.tween(hand.position);
				anim.to({x: (hand.position.x + (hand.width * 0.95) * show)}, 800, Phaser.Easing.Bounce.Out, true, animDelay).start();
			}
			
				bigHandsAnim(0);
				bigHandsAnim(1);

			var buttons = [
				'fRockBtn',
				'fScissorsBtn',
				'fPaperBtn'
			];
			
			var smallHandsAnim = (item) =>{
				// var hand = this[`fAnimHand${item}`];
				var anim = this.add.tween(item);
				anim.to({y: item.position.y - (item.height*0.9) * show}, 800, Phaser.Easing.Exponential.Out).start();
			}

			buttons.forEach(el => {
				smallHandsAnim(this[el])
			});

			var startBtnAnim = () =>{
				this.fBtnStartGameShowTween = this.add.tween(this.fBtnStartGame);
				this.fBtnStartGameShowTween.to({alpha: show*-1}, 200, Phaser.Easing.Exponential.Out, true, 100*(show*-15+2));
				if(!(show*-1+1))
					this.fBtnStartGame.inputEnabled = false;
				else
					this.fBtnStartGameShowTween.onComplete.add(()=>{this.fBtnStartGame.inputEnabled = true});
				this.fBtnStartGameShowTween.start();
			}
			
			startBtnAnim()

		}
		this.roadMap = [
			() => {
				this.fWinChanceGroup.start();
				this.gameStep=1;
				this.animHandsStart();
				handsAnim(1);

				

			},
			() => {
				this.gameStep=0;

				handsAnim(-1);



				
			},
		];

		this.fBtnStartGame.onInputDown.add(()=>{this.roadMap[this.gameStep]()})
		
		this.fRockBtn.onInputDown.add(()=>{this.animHandsResult('rock')})
		this.fScissorsBtn.onInputDown.add(()=>{this.animHandsResult('scissors')})
		this.fPaperBtn.onInputDown.add(()=>{this.animHandsResult('paper')})
		
		// this.fAnimHand0.animations.play('idle', 5, true);
		// console.log(this.fAnimHand0);
		
	
	}
	
	animHandsStart() {
		setTimeout(() => {
			this.fAnimHand0.animations.play('idle', 5, true)
			this.fAnimHand0.animations.paused = 0;
		}, Math.random() * (10 - (1)) + (1));
		setTimeout(() => {
			this.fAnimHand1.animations.play('idle', 5, true)
			this.fAnimHand1.animations.paused = 0;
		}, Math.random() * (30 - (20)) + (20));
	}


	
	animHandsResult(selected) {
		if(this.gameStep){
			this.fWinChanceGroup.stop();
			this.fScore.text = this.gameScore += this.fWinChanceGroup.variableChance;
			this.fAnimHand0.animations.play(selected, 5, false);
			this.fAnimHand1.animations.play(this.variablesOfGameResoult[selected][this.fWinChanceGroup.variableChance+1], 5, false);

			
			this.roadMap[this.gameStep]()

			// particles final animation
			setTimeout(() => {
				var emitter = this.game.add.emitter(
						(this.game.world.centerX/.3)-(((this.game.world.centerX/.3)/2)*this.fWinChanceGroup.variableChance),
						this.game.world.centerY/.3,
						30
					);
				if(this.fWinChanceGroup.variableChance>=0){
					emitter.makeParticles(selected);
				} else{
					emitter.makeParticles(this.variablesOfGameResoult[selected][this.fWinChanceGroup.variableChance+1]);
				}
				emitter.scale.set(.3,.3);
		
				emitter.minParticleSpeed.setTo(
					this.fWinChanceGroup.variableChance && 3410*this.fWinChanceGroup.variableChance
					|| 2,
					-110);
				emitter.maxParticleScale = 0.02;
				emitter.minParticleAlpha = .6;
				emitter.gravity = 222;
			 
				emitter.start(false, 0, 0);
				this.add.tween(emitter).to({alpha: 0}, 800, Phaser.Easing.Linear.Out, 1, 999).start()

			}, 511);
			// end particles final animation
		}
	}
	
	/* state-methods-end */
	
}
/* --- end generated code --- */
// -- user code here --