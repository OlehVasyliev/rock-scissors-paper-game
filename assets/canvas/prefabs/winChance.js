
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


class winChance extends Phaser.Group {
	/**
	 * winChance.
	 * @param {Phaser.Game} aGame A reference to the currently running game.
	 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
	 * @param {string} aName A name for this group. Not used internally but useful for debugging.
	 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
	 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
	 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
	 */
	constructor(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
		
		super(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
		
		var _winChanceBg = this.game.add.sprite(0.0, 0.0, 'winChanceBg', null, this);
		_winChanceBg.scale.set(600.0, 20.0);
		
		var _winChanceMax = this.game.add.sprite(580.0, 0.0, 'winChanceCenter', null, this);
		_winChanceMax.scale.set(20.0, 20.0);
		
		var _winChanceCenter = this.game.add.sprite(500.0, 0.0, 'winChanceCenter', null, this);
		_winChanceCenter.scale.set(100.0, 20.0);
		_winChanceCenter.alpha = 0.65;
		
		var _winChanceSlider = this.game.add.sprite(0.0, 0.0, 'winChanceSlider', null, this);
		_winChanceSlider.scale.set(20.0, 20.0);
		
		
		
		// fields
		
		this.fWinChanceSlider = _winChanceSlider;
		
		this.afterCreate()
		
	}
	
	/* group-methods-begin */
	// -- user code here --
	afterCreate = () => {
		this.variableChance = 0;
		this.maxPositionX = this.width - this.fWinChanceSlider.width;
		this.variableChanceBalance = 0;
		
		this.winChanceSliderStep = 10;
		
		var animateWinChanceSlider = () =>{
			this.fWinChanceSlider.x += this.winChanceSliderStep; 
			if (this.fWinChanceSlider.x >= this.maxPositionX || this.fWinChanceSlider.x < 10) {
				this.winChanceSliderStep *= -1;
			}
		}

		this.winChanceTimer = this.game.time.create();
		this.winChanceTimer.loop(5, ()=> animateWinChanceSlider() , this);
		this.winChanceTimer.start();
		this.winChanceTimer.pause();
	}
	
	start = () => {
		this.fWinChanceSlider.x = 10;
		this.winChanceTimer.resume();
	}
	
	stop = () => {
		this.winChanceTimer.pause();
		this.variableChanceBalance = this.fWinChanceSlider.x *(1/this.maxPositionX);
		this.variableChance = Math.round(Math.random() * (this.variableChanceBalance - (-1+this.variableChanceBalance)) + (-1+this.variableChanceBalance));
		if(this.variableChanceBalance<=0.84){
			this.variableChance = -1;
		} else if(this.variableChanceBalance>=0.98){
			this.variableChance = 1;
		}
	}
	/* group-methods-end */
}
/* --- end generated code --- */
// -- user code here --
